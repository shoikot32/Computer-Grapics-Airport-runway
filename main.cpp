#include <iostream>
#include <stdlib.h>
#include<GL/gl.h>
#include <GL/glut.h>
#include<math.h>
#include <cstdlib>

using namespace std;


// Cloud positions
float cloud1X = 100;
float cloud2X = 500;

float planex = 1200, planey = 600;

float landingx = 5.0f;
float landingy = 2.0f;

float takeoffx = 5.0f, takeoffy = 2.0f;




bool isLanding = false;


bool isNightMode = false;




bool isTakeOff = false;

bool isRaining = false;

const int numRaindrops = 1000;
float rainX[numRaindrops];
float rainY[numRaindrops];

void initRain() {
    for (int i = 0; i < numRaindrops; i++) {
        rainX[i] = rand() % 1200; // Random
        rainY[i] = rand() % 1000;
    }
}

void drawRain() {
    if (!isRaining) return;

    glColor3f(0.6, 0.6, 1.0); // Light blue raindrops
    glBegin(GL_LINES);
    for (int i = 0; i < numRaindrops; i++) {
        glVertex2f(rainX[i], rainY[i]);
        glVertex2f(rainX[i], rainY[i] - 10); // Raindrop length
    }
    glEnd();
}

void updateRain(int value) {
    if (isRaining) {
        for (int i = 0; i < numRaindrops; i++) {
            rainY[i] -= 5; // Move raindrops down

            if (rainY[i] < 0) { // Reset raindrop when it reaches bottom
                rainY[i] = 1000;
                rainX[i] = rand() % 1200; // New random X position
            }
        }
        glutPostRedisplay();
    }
    glutTimerFunc(30, updateRain, 0); // Repeat every 30ms
}


void plane(){



if (isLanding) {
        if (planex > -800) planex -= landingx;
        if (planey > 200) planey -= landingy;
        if (planex <= -800 && planey <= 200) {
            isLanding = false;
        }
    }

if (isTakeOff) {   //shoikot
    if (planex < 200) {
        planex += takeoffx;  // Move forward on the ground
    } else {
        planex += takeoffx;  // Continue moving forward
        planey += takeoffy;  // Start taking off
    }

    if (planex >= 1200 || planey >= 900) {  // Stop when fully out of screen
        isTakeOff = false;
    }
}

glPushMatrix();

glTranslatef(planex -280, planey -620, 0.0f);
    // plan body
    glBegin(GL_POLYGON);
    glColor3f(1,1,1);
    glVertex2f(601.7013684734217,822.7771865940432);
    glVertex2f(616.5624037600165,822.8872683369069);
    glVertex2f(625.3689431891098,827.0703745657262);
    glVertex2f(632.9645834467028,833.1248704232279);
    glVertex2f(641.3307959043415,840.5003471950936);
    glVertex2f(650.2474170762983,848.6463961670048);
    glVertex2f(661.8060000769833,859.5444887105078);
    glVertex2f(670.9427847346676,868.6812733681921);
    glVertex2f(673.8049100491229,871.8736430112384);
    glVertex2f(676.0065449063962,874.1853605113755);
    glVertex2f(677.8779345350786,875.7265049114668);
    glVertex2f(680.8501415923976,876.9374040829671);
    glVertex2f(683.6021851639891,877.7079762830127);
    glVertex2f(687.1248009356265,877.2676493115581);
    glVertex2f(691.0877436787184,876.7172405972398);
    glVertex2f(695.9313403647197,875.7265049114668);
    glVertex2f(699.0136291649025,875.7265049114668);
    glVertex2f(701.2152640221757,874.1853605113755);
    glVertex2f(700,870);
    glVertex2f(698.3531387077204,863.2872679678725);
    glVertex2f(677.9880162779422,810.8883583647672);
    glVertex2f(678.4335824768156,809.0619753795652);
    glVertex2f(682.2606173090358,807.6123409734212);
    glVertex2f(687.0734035374338,806.3946480722602);
    glVertex2f(692.5820142807811,804.249189151167);
    glVertex2f(696.7569613704758,800.9440227051587);
    glVertex2f(698.4965226578486,797.7548270116419);
    glVertex2f(697.9746542716368,794.3916751893878);
    glVertex2f(671.0114543173582,789.752845089727);
    glVertex2f(649.5826595925173,786.4208318745342);
    glVertex2f(627.0691748781237,784.039597914358);
    glVertex2f(603.5815489982034,783.173694656112);
    glVertex2f(583.2328224294246,782.9572188415506);
    glVertex2f(566.4177682991556,783.4595735040637);
    glVertex2f(553.1805927650474,784.1132611847603);
    glVertex2f(536.5405324795405,785.7569049882529);
    glVertex2f(519.9350176210129,787.6468406859151);
    glVertex2f(506.4259416134842,789.2222282255444);
    glVertex2f(490.827605780575,791.2679116134669);
    glVertex2f(471.6799013933147,793.4260276476035);
    glVertex2f(319.7491964930285,818.3090803410508);
    glVertex2f(312.4413919713593,819.6495133743365);
    glVertex2f(306.3156307666736,820.8084411698176);
    glVertex2f(300.1898695619879,822.4640523062192);
    glVertex2f(295,825);
    glVertex2f(290.4217638572188,828.0103496131644);
    glVertex2f(287.0277610275957,832.3149385678084);
    glVertex2f(286.1999554593049,837.7784553179337);
    glVertex2f(288.6005916071771,842.5797276134982);
    glVertex2f(294.1468889141223,845.1459248749206);
    glVertex2f(298.3686973119462,846.8843165681423);
    glVertex2f(301.5143584711091,847.2154387954225);
    glVertex2f(304.8255807439122,847.712122136343);
    glVertex2f(307.0606557780543,849.4505138295647);
    glVertex2f(309.2957308121964,851.7683694205269);
    glVertex2f(312.110269744079,854.0862250114891);
    glVertex2f(316.0009559146226,856.072958375171);
    glVertex2f(323.6084683806805,858.2562240694856);
    glVertex2f(332.3583891523874,858.6494789356298);
    glVertex2f(339.7319178925899,858.4528515025577);
    glVertex2f(349.8582306958014,857.9612820198775);
    glVertex2f(359.4929749163326,856.7815183214451);
    glVertex2f(370.5041111683683,855.8966948726207);
    glVertex2f(382.0068160030842,854.3236754080442);
    glVertex2f(407.7139011876407,850.8951477649068);
    glVertex2f(426.2403088599048,848.9269556324431);
    glVertex2f(447.302250245076,845.2237571471381);
    glVertex2f(472.9931897368784,843.1407079991542);
    glVertex2f(500,840);
    glVertex2f(518.1259212765311,836.428660744539);
    glVertex2f(542.6596112416756,832.9569121645657);
    glVertex2f(559.3240044255474,830.6424131112501);
    glVertex2f(572.0537492187829,828.559363963266);
    glVertex2f(583.3947945800289,826.7077647206136);
    glVertex2f(591.7269911719648,825.0876153832927);
    glEnd();


//plan pakha

    glBegin(GL_POLYGON);
    glColor3f(0.671, 0.671, 0.671);
    glVertex2f(396.9036705680077,809.4761894569062);
    glVertex2f(403.6439874186744,809.8994102235503);
    glVertex2f(410,810);
    glVertex2f(416.3890938123589,808.7482393234756);
    glVertex2f(423.8717046628445,806.7748034947759);
    glVertex2f(428.7230677417309,805.0480471446638);
    glVertex2f(432.7521658919924,802.4167993730644);
    glVertex2f(435,800);
    glVertex2f(435.0545076921418,797.400983308453);
    glVertex2f(434.6433752278294,794.2763765796788);
    glVertex2f(434.1500162706545,791.6451288080793);
    glVertex2f(433.0810718634423,788.2738426007176);
    glVertex2f(432.176580441955,786.629312743468);
    glVertex2f(431.0254095418803,785.4781418433931);
    glVertex2f(428.8052042345933,784.7381034076308);
    glVertex2f(424.3650636200194,784.1625179575934);
    glVertex2f(418.6914356125083,784.2447444504559);
    glVertex2f(413.1822605907221,784.5736504219059);
    glVertex2f(406.3574616831363,785.3959153505307);
    glVertex2f(400.9305131542126,786.5470862506054);
    glVertex2f(396.6547355253636,788.0271631221301);
    glVertex2f(393.6123552894518,789.7539194722422);
    glVertex2f(392.7078638679645,793.6185646367788);
    glVertex2f(392.954543346552,798.6343807013902);
    glVertex2f(394.0234877537642,804.7191411732139);
    glEnd();

//pakha picone side

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex2f(435.9567675257559,799.52762557011);
    glVertex2f(439.0196231814829,798.5331919156531);
    glVertex2f(442.4802522989928,797.0216527608787);
    glVertex2f(446.0602134550374,795.6204456446391);
    glVertex2f(449.1230691107645,794.3565705669344);
    glVertex2f(450.8732723426085,793.6803556819036);
    glVertex2f(451.9870380356002,792.5268126427337);
    glVertex2f(452.4271709945014,790.77567234407);
    glVertex2f(451.6347863890862,789.6175717669247);
    glVertex2f(450.6290674668284,788.6728055066219);
    glVertex2f(448.7090586152455,788.4594711897793);
    glVertex2f(447.002384080505,788.2766132039143);
    glVertex2f(445.5090438626071,788.0328025560942);
    glVertex2f(443.1318900463616,787.8804209012067);
    glVertex2f(440.9071178850035,787.7280392463191);
    glVertex2f(438.1642480970278,787.6975620153416);
    glVertex2f(436.4575735622874,787.7585155772066);
    glVertex2f(435.2689966541646,787.7585155772966);
    glVertex2f(434.0499434150643,786.8442256479714);
    glVertex2f(432.5261268661889,786.3261280213537);
    glVertex2f(433.6657998943709,790.252677886258);
    glVertex2f(434.4647565627031,793.4485045595866);
    glVertex2f(434.8255757032402,796.2061937051201);
    glVertex2f(435.2637132310352,799.1185196251696);
    glEnd();

//plan window

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex2f(308.6783405097053,848.2569399231455);
    glVertex2f(309.2960904711659,847.3179599817253);
    glVertex2f(310.7539803802131,846.7990500140983);
    glVertex2f(312,846);
    glVertex2f(313.5462102060155,846.378980040305);
    glVertex2f(314.386350153602,848.2322209246871);
    glVertex2f(314.8805501227705,849.6406998368175);
    glVertex2f(314.5840301412604,850.9750397535727);
    glVertex2f(313.2744002229728,851.4692397227412);
    glVertex2f(311.7670903170087,851.691629708867);
    glVertex2f(310.8281103755884,851.0985897458647);
    glVertex2f(310.0373904249188,850.3325797936535);
    glVertex2f(309.3455104680828,849.5912798399006);
    glEnd();

//plan window2
    glBegin(GL_POLYGON);
    glColor3f(0,0,0);

    glVertex2f(315.6712700734402,846.3542700418466);
    glVertex2f(316.3137300333593,845.4400000988848);
    glVertex2f(318.1175599208245,845.2917401081341);
    glVertex2f(319.9460998067481,845.2670301096757);
    glVertex2f(322.886589623301,848.2075199262287);
    glVertex2f(323.1288332291762,848.9642452259202);
    glVertex2f(322.6765300989596,849.5431932325974);
    glVertex2f(322.0794899670737,849.8145751107273);
    glVertex2f(321.3377128335185,849.9593121123967);
    glVertex2f(320.5778435747546,850.0859569888573);
    glVertex2f(319.9446191924514,850.1764176149006);
    glVertex2f(319.1304735580616,850.2487861157352);
    glVertex2f(318.3886964245064,850.3754309921959);
    glVertex2f(317.7554720422032,850.4477994930306);
    glVertex2f(317.2488925363606,850.4477994930306);
    glVertex2f(316.8870500321873,850.1402333644833);
    glVertex2f(316.5975760288487,849.5793774830147);
    glVertex2f(316.3081020255101,848.9099688502941);
    glVertex2f(316.0909965230061,848.4395735948689);
    glVertex2f(316,848);
    glVertex2f(315.8015225196675,847.4806909588098);
    glVertex2f(315.6567855179982,847.1912169554711);
    glEnd();

//plan design 1

    glBegin(GL_POLYGON);
    glColor3f(1,1,0);
    glVertex2f(407.1423639682738,825.3805972762892);
    glVertex2f(402.1055975488507,827.9829265929911);
    glVertex2f(397.0688311294275,829.4100104118277);
    glVertex2f(392.7875796729178,830.3334175887219);
    glVertex2f(387.8347593604851,831.7605014075584);
    glVertex2f(384.2250767598085,832.5999624774623);
    glVertex2f(380.6153941593119,833.3554774403758);
    glVertex2f(373.6478672791099,834.7825612592123);
    glVertex2f(370,835);
    glVertex2f(365.3372026870616,835.789914543097);
    glVertex2f(360.3004362676385,836.1256989710585);
    glVertex2f(354.9042136279606,836.2550362998896);
    glVertex2f(349.6176464024862,836.3245963949616);
    glVertex2f(342.383396514995,835.9767959196015);
    glVertex2f(335.2187067225758,835.8376757294575);
    glVertex2f(330,835);
    glVertex2f(325.7445082308466,835.0310744947442);
    glVertex2f(319.5300129313596,834.3248716198025);
    glVertex2f(314.4453522317793,834.1130107573199);
    glVertex2f(307.3833234823622,833.1949470198957);
    glVertex2f(303.9229293951478,832.6299847199424);
    glVertex2f(299.6150918580034,831.8531615575065);
    glVertex2f(294.8835325958939,830.9350978200823);
    glVertex2f(292.6179146963481,830.228782596669);
    glVertex2f(290.8073289847237,829.9077709529598);
    glVertex2f(289.4095075299198,829.3004080703579);
    glVertex2f(291.7132579522276,826.9966576480501);
    glVertex2f(293.2623315120553,826.1625411158353);
    glVertex2f(296.7576769803844,824.4545882165381);
    glVertex2f(298.5450695494163,823.4615923448538);
    glVertex2f(302.7553720453581,821.991958454761);
    glVertex2f(305.1385621374006,821.3564410968829);
    glVertex2f(307.5217522294432,820.6414840692702);
    glVertex2f(308.8722266149339,822.1508377942304);
    glVertex2f(310.8979381931702,823.2629931705169);
    glVertex2f(312.6853307622021,823.8587906935276);
    glVertex2f(315.5848787075205,824.6134675560077);
    glVertex2f(318.2461076436347,825.0901055744162);
    glVertex2f(320.390978726473,825.5667435928247);
    glVertex2f(323.2494035104907,826.0984452767516);
    glVertex2f(327.8401696949939,826.6034295570469);
    glVertex2f(333.1195508071726,827.6593057794826);
    glVertex2f(337.4807786824507,828.3479207071581);
    glVertex2f(342.3469908380241,828.3479207071581);
    glVertex2f(346.8918493606823,828.5774590163833);
    glVertex2f(350.8858159412001,828.7151820019184);
    glVertex2f(354.9256901835629,828.6692743400733);
    glVertex2f(359.2410103969959,828.5774590163833);
    glVertex2f(363.1890693156687,828.4397360308482);
    glVertex2f(366.8097893523812,828.3796207611747);
    glVertex2f(370.4428452190587,828.1814540775378);
    glVertex2f(375.5951789936195,827.9172318326886);
    glVertex2f(378.6997903705985,827.7190651490516);
    glVertex2f(383.7860685839469,827.2566762205654);
    glVertex2f(388.8062912360831,826.7942872920792);
    glVertex2f(393.0338471536715,826.1997872411683);
    glVertex2f(396.5347918979243,826.0676761187436);
    glVertex2f(400,825);
    glVertex2f(402.7440146518823,825.4731760678328);
    glVertex2f(405,825);
    glEnd();


//plan design 2

    glBegin(GL_POLYGON);
    glColor3f(1,0,0);
    glVertex2f(677.5502946448202,808.9840128712718);
    glVertex2f(680.3668794105798,808.2257015881827);
    glVertex2f(684.2667660093239,806.9799044802506);
    glVertex2f(688.9791289828064,805.4632819140724);
    glVertex2f(693.6914919562888,803.1341829731558);
    glVertex2f(697.4830483717345,799.6134520159563);
    glVertex2f(698.4580200214206,796.5802068835999);
    glVertex2f(696.39974653875,793.7094570261911);
    glVertex2f(694.2873079644303,793.0594759264004);
    glVertex2f(691.2540628320738,792.4636599182589);
    glVertex2f(688.7624686162095,792.0303391850651);
    glVertex2f(685.6296410005061,791.7896197030336);
    glVertex2f(682.4524799786475,791.4366018117161);
    glVertex2f(679.8048457937653,791.0835839203984);
    glVertex2f(676.4511758262478,790.554057083422);
    glVertex2f(667.4492195976482,789.2302399909809);
    glVertex2f(661.359660972419,788.3476952626868);
    glVertex2f(655.7113747113368,788.171186317028);
    glVertex2f(645.4738558631254,788.2594407898574);
    glVertex2f(638.7665159280905,789.5832578822985);
    glVertex2f(632.3239394115436,791.0835839203984);
    glVertex2f(625.6165994765087,792.7604189041572);
    glVertex2f(619.3980736937012,793.9869604308165);
    glVertex2f(612.80396446208,795.6825885189476);
    glVertex2f(605.6446458677483,796.6246041234649);
    glVertex2f(598.67373039432,797.5666197279822);
    glVertex2f(590,800);
    glVertex2f(568.6824424536608,803.1523659965385);
    glVertex2f(553.2150142656674,805.6471124784729);
    glVertex2f(542.7370790415428,807.8092260961494);
    glVertex2f(530,810);
    glVertex2f(517.7896142221986,812.2997697636313);
    glVertex2f(500.3263888486576,814.7945162455657);
    glVertex2f(487.1873907104697,816.1250477025973);
    glVertex2f(472.7178611152501,817.9545284560159);
    glVertex2f(460,820);
    glVertex2f(449.7661934814535,821.280857098595);
    glVertex2f(440.8390864542306,822.186405181423);
    glVertex2f(432.9252236096611,823.5466003578333);
    glVertex2f(425.7532854067699,824.2885249995117);
    glVertex2f(418.0867307760932,825.1541037481364);
    glVertex2f(410.4201761454165,825.5250660689757);
    glVertex2f(404.5434183983594,827.5006502071003);
    glVertex2f(399.5823024435303,828.7409291958076);
    glVertex2f(395,830);
    glVertex2f(389.8789432965852,831.002614410509);
    glVertex2f(385.9392335677503,832.0969782240742);
    glVertex2f(382.4372693643416,832.6076813370713);
    glVertex2f(377.0384078840864,833.9209179133496);
    glVertex2f(371.6395464038312,834.7964089642018);
    glVertex2f(367.4080063247122,835.0152817269148);
    glVertex2f(362.8846358953093,835.890772777767);
    glVertex2f(381.2699479632053,836.5473910659061);
    glVertex2f(388.7116218954489, 835.963730365338);
    glVertex2f(394.4023137259882, 836.1096455404801);
    glVertex2f(402.573563533942, 835.5989424274829);
    glVertex2f(410, 835);
    glVertex2f(418.6925928313256, 834.4932842639238);
    glVertex2f(427.9100360256717, 834.4932842639238);
    glVertex2f(435.8866695592404, 834.4932842639238);
    glVertex2f(445.8131468454594, 833.7842501720511);
    glVertex2f(456.9804337924556, 833.0752160801783);
    glVertex2f(468.1477207394518, 832.1889234653373);
    glVertex2f(478.2514565486389, 831.1253723275281);
    glVertex2f(492.4321383860944, 829.7073041437826);
    glVertex2f(505.9037861316772, 828.289235960037);
    glVertex2f(518.1346242164826, 826.8711677762915);
    glVertex2f(529.8336867323834, 826.3393922073869);
    glVertex2f(538.1648373118886, 825.2758410695777);
    glVertex2f(544.7234026617117, 824.7440655006732);
    glVertex2f(553.0545532412169, 824.3895484547368);
    glVertex2f(560.8539282518175, 825.984751614505);
    glVertex2f(568.1215276935134, 828.289235960037);
    glVertex2f(575.2789187537646, 827.6697126687336);
    glVertex2f(579.685883879813, 827.0086972236011);
    glVertex2f(588.0585069299298, 825.3561586107699);
    glVertex2f(596.1009052754382, 823.813789238794);
    glVertex2f(605.9059677115703, 821.5002351808303);
    glVertex2f(613.507645330594, 820.618881253987);
    glVertex2f(620, 820);
    glVertex2f(628.7110005686413, 818.7460041594445);
    glVertex2f(637.8550475596479, 817.4239732691799);
    glVertex2f(646.7787560689295, 815.7714346563487);
    glVertex2f(653.3276300491149, 814.8267502010219);
    glVertex2f(658.2499414332626, 813.688396550488);
    glVertex2f(663.8315296426773, 812.912246334215);
    glVertex2f(669.5750412430981, 811.8256360314327);
    glVertex2f(675,810);
    glEnd();

//plan ar wheel

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex2f(467.323604476862, 793.8868000927973);
    glVertex2f(467.1486076052906, 791.728505343418);
    glVertex2f(467.9069273820996, 790.3868626613713);
    glVertex2f(468.6069148683848, 789.3368814319434);
    glVertex2f(469.656890978127, 788.2285679119918);
    glVertex2f(470.823541908288, 786.945257520469);
    glVertex2f(471.6985262661445, 786.0702731626125);
    glVertex2f(471.9901877187634, 784.5536336089945);
    glVertex2f(471.2318679419544, 783.6786492511379);
    glVertex2f(473.7401564344764, 783.6786492511379);
    glVertex2f(475.6651220217607, 783.5619846700904);
    glVertex2f(477.0650969943311, 783.0369940553766);
    glVertex2f(477.8817490616639, 785.7202794149699);
    glVertex2f(478.2900750953302, 788.52022936464107);
    glVertex2f(478.9900625816154, 791.1451824381803);
    glVertex2f(477.8817490616639, 793.0701480254646);
    glVertex2f(474.5568085018091, 793.5368063496547);
    glEnd();


    glBegin(GL_POLYGON);
    glColor3f(0,0,0);
    glVertex2f(471.2318679419544, 783.6786492511379);
    glVertex2f(473.7401564344764, 783.6786492511379);
    glVertex2f(475.6651220217607, 783.5619846700904);
    glVertex2f(477.0650969943311, 783.0369940553766);
    glVertex2f(477.8817490616639, 785.7202794149699);
    glVertex2f(478.2900750953302, 788.52022936464107);
    glVertex2f(478.9900625816154, 791.1451824381803);
    glVertex2f(477.8817490616639, 793.0701480254646);
    glVertex2f(474.5568085018091, 793.5368063496547);
    glVertex2f(470.7795624232518, 782.9435456180261);
    glVertex2f(468.9685742727974, 781.8569527277534);
    glVertex2f(467.2662454113702, 779.7562064732263);
    glVertex2f(466.6505094402157, 777.2570428255991);
    glVertex2f(466.7591687292473, 774.757879177972);
    glVertex2f(467.8095418565065, 772.7295724494629);
    glVertex2f(469.5480940840927, 771.099683114054);
    glVertex2f(471.2328588683881, 770.3752878538721);
    glVertex2f(474, 770);
    glVertex2f(476.6833837937332, 771.1721226400721);
    glVertex2f(478.4943719441876, 772.9468910275175);
    glVertex2f(479.363462564057, 774.6854396519537);
    glVertex2f(479.5809648344603, 777.0397242475445);
    glVertex2f(479.1825474413603, 778.850712397999);
    glVertex2f(478.394928921513, 780.9514586525262);
    glVertex2f(477.2266802388695, 782.0380515427988);
    glVertex2f(476.5022849786877, 783.341963011126);
    glVertex2f(474.6912968282333, 783.6679408782079);
    glVertex2f(472.916528440788, 783.5230618261716);
    glVertex2f(471.685056498479, 783.0522040970534);
    glVertex2f(470.2665402309385, 782.593066506865);
    glEnd();


    glBegin(GL_POLYGON);
    glColor3f(1,1,1);
    glVertex2f(470.6497536105954, 777.6078820251779);
    glVertex2f(471.6109943548288, 778.7250883066673);
    glVertex2f(473, 779);
    glVertex2f(474.1820970005985, 778.8400948356441);
    glVertex2f(475, 778);
    glVertex2f(475.4635983234833, 776.7535478099213);
    glVertex2f(475.1678672489715, 775.4063284704783);
    glVertex2f(474.3956805544127, 774.5519942552218);
    glVertex2f(473.7549298929702, 774.1905451641517);
    glVertex2f(472.7691596445973, 774.0426796268957);
    glVertex2f(471.4876583217124, 774.5519942552218);
    glVertex2f(470.8140486519909, 775.324180947806);
    glVertex2f(470.4854585691999, 776.6878297933631);
    glEnd();

//biman ar shamne wheel

    glBegin(GL_POLYGON);
    glColor3f(0,0,0);

    glVertex2f(338.0860123426534, 814.9553895636764);
    glVertex2f(340.5028104776905, 814.8873107429711);
    glVertex2f(342.4770962781433, 814.5469166394447);
    glVertex2f(343.8727121026013, 813.491694918513);
    glVertex2f(344, 812);
    glVertex2f(343.3961603576644, 810.802581006548);
    glVertex2f(342.5792145092012, 810.0196750625443);
    glVertex2f(342.2047800995322, 808.9984927519652);
    glVertex2f(342.409017457438, 807.704995158565);
    glVertex2f(343.532317999075, 807.3305616446861);
    glVertex2f(344, 806);
    glVertex2f(343.4982785887223, 805.4924334856438);
    glVertex2f(342.3409386367327, 805.5264728959963);
    glVertex2f(341.5920716089748, 805.6285911270543);
    glVertex2f(341.1155198640379, 805.1520393821174);
    glVertex2f(340.8772439915695, 804.1308570715383);
    glVertex2f(341.5580321986221, 803.2117929920172);
    glVertex2f(342.3749780470854, 801.8161771657592);
    glVertex2f(342.7153721506117, 800.7269160362748);
    glVertex2f(342.783450971317, 799.1270637497009);
    glVertex2f(342.3749780470854, 798.0378026184167);
    glVertex2f(341.5580321986221, 797.254896180306);
    glVertex2f(340.638968119101, 796.3017926904323);
    glVertex2f(339.6518252188746, 795.9954379972586);
    glVertex2f(337.745618239127, 796.0635168179638);
    glVertex2f(336.3159630043164, 796.9825808974849);
    glVertex2f(335.0905442316215, 798.5824331840588);
    glVertex2f(334.9884260005636, 801.2375071915643);
    glVertex2f(336.2819235939637, 803.3139112230751);
    glVertex2f(337.6775394184218, 803.688344736954);
    glVertex2f(338.3923670358271, 805.0499211510595);
    glVertex2f(338, 806);
    glVertex2f(336.9627180180164, 806.5816946169281);
    glVertex2f(336.0776871318479, 806.6497734376334);
    glVertex2f(335.6692142076163, 807.8411527997756);
    glVertex2f(337.1329088527796, 808.3177045449124);
    glVertex2f(338.0489684000722, 808.6151148966998);
    glVertex2f(338.3100914456186, 809.7640562971037);
    glVertex2f(338.2056422274001, 810.6344664489249);
    glVertex2f(337.5963551211252, 811.870448864511);
    glVertex2f(337.3178238725425, 813.1586558892063);
    glVertex2f(337.4919059029067, 814.3250054926467);
    glEnd();

//plan wheel white

    glBegin(GL_POLYGON);
    glColor3f(1,1,1);
    glVertex2f(336.8122129534775, 800.5255726779957);
    glVertex2f(337.4929874201864, 801.6223759854711);
    glVertex2f(338.5141491202496, 801.9627632188254);
    glVertex2f(339.667683633284, 801.6791071910301);
    glVertex2f(340.6510245296412, 800.5444830798488);
    glVertex2f(340.5942933240822, 799.3720381649613);
    glVertex2f(339.9324292592264, 798.313055661192);
    glVertex2f(338.778894746192, 797.9348476241315);
    glVertex2f(337.6064498313045, 798.275234857486);
    glVertex2f(336.7933025516245, 799.3153069594023);
    glEnd();

//plan ar picone design

    glBegin(GL_QUADS);
    glColor3f(1,1,0);
    glVertex2f(640.3649788405372,840.7855787308916);
    glVertex2f(686.9455544805999,834.38813147375);
    glVertex2f(686.2316219576372,831.3539182511589);
    glVertex2f(637.7734519615494,838.2255187846741);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(1,0,0);
    glVertex2f(635.6598021060104,835.8485659284743);
    glVertex2f(684.8617517680204,828.3083290607669);
    glVertex2f(682.7291595226083,823.5861605173542);
    glVertex2f(630.5568135187741,831.5833814376499);
    glEnd();


    glBegin(GL_POLYGON);
    glColor3f(0.710, 0.188, 0.176);
    glVertex2f(630.8594615936017, 826.9349535027229);
    glVertex2f(641.6609028365986, 826.2425534230437);
    glVertex2f(659.820141577471, 823.9399205999241);
    glVertex2f(681.6420157165726, 820.1990278903638);
    glVertex2f(676.7933652847228, 809.9534956313147);
    glVertex2f(672.7821916359841, 811.1896445946402);
    glVertex2f(660.943810409088, 813.3987205173624);
    glVertex2f(655.902585867491, 814.2483651030249);
    glVertex2f(650, 815);
    glVertex2f(642.3082724968925, 816.6840129152571);
    glVertex2f(633.5852547507585, 818.1000872246943);
    glVertex2f(626.1083823969294, 819.2329466722442);
    glVertex2f(623.2762337780543, 819.3462326169994);
    glVertex2f(621.1052229921038, 819.456087486666);
    glVertex2f(620.9433013020465, 820.8433741479075);
    glEnd();


//plan ar lag

    glBegin(GL_POLYGON);
    glColor3f(1,1,1);
    glVertex2f(638.0241243163877, 805.5777660223786);
    glVertex2f(650.8906284061493, 805.5777660223786);
    glVertex2f(662.7619332845481, 805.2934233905606);
    glVertex2f(675, 805);
    glVertex2f(684.3719733027114, 804.2271385212433);
    glVertex2f(691.0540251504328, 803.3741106257895);
    glVertex2f(699.5132184470164, 802.5210827303357);
    glVertex2f(703.0675013447407, 802.1656544405632);
    glVertex2f(704.8446427936027, 801.3126265451094);
    glVertex2f(705, 800);
    glVertex2f(705.0578997674662, 798.6824572007934);
    glVertex2f(703.6361866083765, 798.2559432530664);
    glVertex2f(700.8638459481516, 797.9716006212485);
    glVertex2f(695.1769933117929, 797.4740010155671);
    glVertex2f(688.8503697538438, 796.905317519312);
    glVertex2f(683.0213458015761, 796.1233735144318);
    glVertex2f(678.5429493504436, 796.2655448303408);
    glVertex2f(674.9175807947675, 796.905317519312);
    glVertex2f(666.5294731561359, 797.8294290353395);
    glEnd();




// plan wind design

    glBegin(GL_POLYGON);
    glColor3f(0.671, 0.671, 0.671);
    glVertex2f(441.4216157849391, 809.3729542745134);
    glVertex2f(441.4809973398804, 802.8409832309706);
    glVertex2f(442.609246883765, 799.8719054839056);
    glVertex2f(448.3692577130708, 797.6747879510776);
    glVertex2f(453.357038231897, 796.7246830720169);
    glVertex2f(459.117319574454, 795.7151966380147);
    glVertex2f(462.8583571187471, 794.9432364237779);
    glVertex2f(470.874867035822, 795.2995257534257);
    glVertex2f(474.1408525575934, 796.8434461818995);
    glVertex2f(477.4068380793646, 798.3279850554319);
    glVertex2f(474.2596156674759, 799.9906685937882);
    glVertex2f(469.9814437117026, 800.9407734728491);
    glVertex2f(465.1148562065163, 802.0096414617924);
    glVertex2f(460.1861871463887, 803.2566541155596);
    glVertex2f(455, 805);
    glVertex2f(450.4476121360161, 806.8789289669788);
    glVertex2f(444.9251275264756, 808.7197571701591);
    glEnd();



    glBegin(GL_POLYGON);
    glColor3f(1,0,0);
    glVertex2f(506.1250070054209, 799.8630725585685);
    glVertex2f(510.3203529302554, 803.8520899952966);
    glVertex2f(514.3781465296854, 808.6664213844512);
    glVertex2f(517.5418500139868, 811.7613487060505);
    glVertex2f(521.1182104745014, 815.1313806784586);
    glVertex2f(521.5996436134169, 809.2854068648771);
    glVertex2f(521.0494343117992, 804.47107455496165);
    glVertex2f(520.292896522075, 800.9634911618039);
    glVertex2f(519.8802395458619, 797.5246830266935);
    glVertex2f(519.0549255934353, 795.3238458202228);
    glVertex2f(518.2983878037111, 794.360979542392);
    glVertex2f(514.7220273431965, 794.2922033796987);
    glVertex2f(511.2832192080862, 794.6360841932008);
    glVertex2f(508.1195157237848, 794.9799650067118);
    glVertex2f(505, 795);
    glVertex2f(500.7604663146489, 796.4242644234582);
    glVertex2f(503.8274323375493, 798.2627341295972);
    glEnd();



//plan window

    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(589.8033906326415,810.6707898109263);
    glVertex2f(592.5921566325294,810.22259527523);
    glVertex2f(592.5921566325294,806.2386438468186);
    glVertex2f(589.3551960969452,806.5374402039494);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(584.0618460145364,811.6837635074519);
    glVertex2f(586.4398635338207,811.392577688764);
    glVertex2f(586.3913325640393,807.1218523480085);
    glVertex2f(583.7585944265667,807.4338241309542);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(578.3093671158161,812.3278154723203);
    glVertex2f(580.6478339415123,812.0280120331284);
    glVertex2f(580.1381680948863,807.620901477008);
    glVertex2f(577.6198192056751,808.1905280114731);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(572.0462336798289,813.5247139542698);
    glVertex2f(574.8203045596122,813.225967859524);
    glVertex2f(574.6069144919364,808.6594204112653);
    glVertex2f(571.6621315580127,808.7447764383355);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(566,814);
    glVertex2f(568.5046634593994,813.7112862802352);
    glVertex2f(568.2838595102392,810.0312204609);
    glVertex2f(565.6342121203179,810.2520244100601);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(560.3349173404754,814.9257080006158);
    glVertex2f(562.8373620976232,814.7785053678424);
    glVertex2f(562.395754199303,810.8040342829604);
    glVertex2f(559.9669107585419,810.9880375739272);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(554.2944453146142,815.9242985774034);
    glVertex2f(556.9281298652776,815.7693759567762);
    glVertex2f(556.6182846240231,811.7413878204674);
    glVertex2f(554,812);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(548.4073857307784,816.7376423356966);
    glVertex2f(550.57630241956,816.4665277495989);
    glVertex2f(550.3439184886191,812.2061556823492);
    glVertex2f(547.9813485240534,812.7096541993877);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(541.8231743541199,817.705908714617);
    glVertex2f(544.6892428357243,817.5509860939896);
    glVertex2f(544.5730508702537,813.1744220612695);
    glVertex2f(541.5907904231791,813.484267302524);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(535.437931660551,818.1921337221296);
    glVertex2f(538.4253162382882,817.9120664179668);
    glVertex2f(535.5935246073082,814.1778356957952);
    glVertex2f(538.4564348276397,813.8977683916323);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(530.1166528814567,819.1256914026725);
    glVertex2f(532.9484445124367,818.8767426878611);
    glVertex2f(532.9484445124367,814.1778356957952);
    glVertex2f(529.6809926305367,814.3645472319038);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0,0,0);
    glVertex2f(511.6332298370522, 821.627082548115);
    glVertex2f(514.5893818702485, 821.285988175054);
    glVertex2f(514.5325320080716, 817.2497047604974);
    glVertex2f(511.1215882774606, 817.761346320089);
    glVertex2f(505.4935311219523, 822.6503656672984);
    glEnd();

    glPopMatrix();

}



void update(int value)
 {
    // Move clouds to the right
    cloud1X += 2.0f;
    cloud2X += 4.0f;


    if (cloud1X > 1300){

        cloud1X = -200;
    }
    if (cloud2X > 1300){

        cloud2X = -200;
    }

     if (isLanding) {
        plane();
    }


    glutPostRedisplay();
    glutTimerFunc(16, update, 0);
}






void drawLampPost(int x, int y) {
    // lamp post bar

       if (isNightMode) {
        glColor3f(0.2f, 0.2f, 0.2f); // Darker pole for night mode
    } else {
        glColor3f(0.5f, 0.25f, 0.1f); // Original color for day mode
    }
    glBegin(GL_QUADS);
    glVertex2i(x - 5, y);
    glVertex2i(x + 5, y);
    glVertex2i(x + 5, y + 100);
    glVertex2i(x - 5, y + 100);
    glEnd();

    //lamp post light
     if (isNightMode) {


         glColor3f(1.0f, 1.0f, 0.0f);  // night color
}
    else{
        glColor3f(1.0f, 1.0f, 1.0f); // white light day
}

    glBegin(GL_POLYGON);
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + cos(angle) * 15, y + 100 + sin(angle) * 15);
    }
    glEnd();
}




void drawTree(int x, int y) {

    glColor3f(0.4f, 0.2f, 0.0f); //tree
    glBegin(GL_QUADS);
    glVertex2i(x - 10, y);
    glVertex2i(x + 10, y);
    glVertex2i(x + 10, y + 60);
    glVertex2i(x - 10, y + 60);
    glEnd();

    if (isNightMode){
        glColor3f(0.0f, 0.25f, 0.10f);
    }
        else{
    glColor3f(0.0f, 0.5f, 0.0f); // First circle
        }

    glBegin(GL_TRIANGLE_FAN);
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + cos(angle) * 30, y + 60 + sin(angle) * 30);
    }
    glEnd();

    glBegin(GL_TRIANGLE_FAN); // Middle circle
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + cos(angle) * 25, y + 90 + sin(angle) * 25);
    }
    glEnd();

    glBegin(GL_TRIANGLE_FAN); // Last circle
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + cos(angle) * 20, y + 115 + sin(angle) * 20);
    }
    glEnd();
}



void drawCloud(int x, int y) {


        if (isNightMode) {
        glColor3f(0.3f, 0.3f, 0.3f); // Night sky cloud

    }
        else {
        glColor3f(1.0f, 1.f, 1.0f); // Day sky cloud

    }

    glBegin(GL_TRIANGLE_FAN); // First circle
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + cos(angle) * 50, y + sin(angle) * 50);
    }
    glEnd();

    glBegin(GL_TRIANGLE_FAN); // Second circle
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x - 30 + cos(angle) * 40, y + 10 + sin(angle) * 40);
    }
    glEnd();

    glBegin(GL_TRIANGLE_FAN); // Third circle
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + 30 + cos(angle) * 40, y + 10 + sin(angle) * 40);
    }
    glEnd();

    glBegin(GL_TRIANGLE_FAN); // Fourth circle
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + cos(angle) * 45, y - 20 + sin(angle) * 35);
    }
    glEnd();

    glBegin(GL_TRIANGLE_FAN); // Fifth circle
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(-70 + x + cos(angle) * 45, y - 20 + sin(angle) * 35);
    }
    glEnd();


}



void drawSun(int x, int y, int radius) {

     if (isNightMode) {
        glColor3f(0.05f, 0.05f, 0.2f); //sun color will be night key color

    }
    else if (isRaining) {
        glColor3f(0.3f, 0.4f, 0.5f); //sun color will be night key color

    }
        else {
        glColor3f(1.0f, 1.0f, 0.0f); // Yellow color for the sun

    }


    glBegin(GL_TRIANGLE_FAN);
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + cos(angle) * radius, y + sin(angle) * radius);
    }
    glEnd();
}


void drawMoon(int x, int y, int radius) {
    glColor3f(0.8f, 0.8f, 0.8f); // Light gray

    glBegin(GL_TRIANGLE_FAN);
    for (int i = 0; i <= 360; i++) {
        float angle = i * M_PI / 180.0f;
        glVertex2f(x + cos(angle) * radius, y + sin(angle) * radius);
    }
    glEnd();
}


void drawsky(){

    glBegin(GL_QUADS); // sky
    if(isRaining){

            glColor3f(0.3f, 0.4f, 0.5f); // rainly sky
    }
    else {
            glColor3f(0.6f, 0.85f, 1.0f);

    }

    glVertex2i(0, 500);
    glVertex2i(1200, 500);
    glVertex2i(1200, 1000);
    glVertex2i(0, 1000);
    glEnd();

}

void nightsky(){

    glBegin(GL_QUADS); // sky
    glColor3f(0.05f, 0.05f, 0.2f);
    glVertex2i(0, 500);
    glVertex2i(1200, 500);
    glVertex2i(1200, 1000);
    glVertex2i(0, 1000);
    glEnd();
    }

void nightmode(){



        drawCloud(cloud1X, 850);
        drawCloud(cloud2X, 900);
        nightsky();
        drawMoon(200, 920, 50);
        drawSun(1000, 850, 50);

}



void drawScene() {

    glClear(GL_COLOR_BUFFER_BIT);


    drawsky();

     if (isNightMode) {
        nightmode();
    }


    glBegin(GL_POLYGON); // Runway below
    glColor3f(0.6f, 0.6f, 0.6f);
    glVertex2i(200,350);
    glVertex2i(400,350);
    glVertex2i(110,0);
    glVertex2i(0,0);
    glVertex2i(0,150);
    glEnd();



    glBegin(GL_POLYGON); // yellow line quad
    glColor3f(0.9f, 0.7f, 0.0f);
    glVertex2i(0,15);
    glVertex2i(0,0);
    glVertex2i(20,0);
    glVertex2i(280,350);
    glVertex2i(260,350);
    glEnd();


    glBegin(GL_QUADS); // dark grass


    if(isNightMode){

        glColor3f(0.0f, 0.40f, 0.15f); // Dark green for night mode
    }
    else{

        glColor3f(0.0f, 0.4f, 0.0f); // Bright green for day mode
    }

    glVertex2i(110, 0);
    glVertex2i(1200, 0);
    glVertex2i(1200, 550);
    glVertex2i(500, 550);
    glEnd();


    glBegin(GL_QUADS); // light grass

     if(isNightMode){

        glColor3f(0.0f, 0.25f, 0.10f); // Darker green for night mode
    }
    else{

       glColor3f(0.0f, 0.50f, 0.20f); // Bright green for day mode
    }


    glVertex2i(110, 0);
    glVertex2i(250, 0);
    glVertex2i(550, 550);
    glVertex2i(500, 550);
    glEnd();





    glBegin(GL_QUADS); // runway
    glColor3f(0.5f, 0.5f, 0.5f);
    glVertex2i(0, 270);
    glVertex2i(1200, 270);
    glVertex2i(1200, 466);
    glVertex2i(0, 466);
    glEnd();

    glBegin(GL_TRIANGLES);

    if(isNightMode){

        glColor3f(0.0f, 0.25f, 0.10f); // Darker green for night mode
    }
    else{

        glColor3f(0.0f, 0.50f, 0.20f);

    }// Left grass

    glVertex2i(0,270);
    glVertex2i(120,270);
    glVertex2i(0,140);
    glEnd();


    // Yellow ash color side runway (Below)

    bool f= true;

     for(int i = 0; i<=1200; i= i+50){


       if (f) {


                glColor3f(0.9f, 0.7f, 0.0f);
                f = !f;
            }
            else {

                glColor3f(0.75f, 0.75f, 0.75f);
                f = !f;

            }

            glBegin(GL_QUADS);

            glVertex2i(i,255);
            glVertex2i(i-60, 255);
            glVertex2i(i-40, 270);
            glVertex2i(i+20, 270);
            glEnd();

        }


    glBegin(GL_QUADS); // light color side runway (up)
    glColor3f(0.75f, 0.75f, 0.75f);
    glVertex2i(0, 466);
    glVertex2i(1200, 466);
    glVertex2i(1200, 458);
    glVertex2i(0, 458);
    glEnd();


    // white color runway

     bool x= true;

     for(int i = 10; i<=1200; i= i+40){


       if (x) {

                glColor3f(1.0f, 1.0f, 1.0f);
                x = !x;
            }
            else {

                glColor3f(0.5f, 0.5f, 0.5f);
                x = !x;

            }

            glBegin(GL_QUADS);
            glVertex2i(i, 378);       // 441 - 15
            glVertex2i(i + 50, 378);   // 441 - 15
            glVertex2i(i + 50, 385);   // 431 - 15
            glVertex2i(i, 385);        // 431 - 15
            glEnd();

        }


    glBegin(GL_QUADS); // atc building
    glColor3f(0.7f, 0.7f, 0.7f);
    glVertex2i(210,500);
    glVertex2i(290,500);
    glVertex2i(290,700);
    glVertex2i(210,700);
    glEnd();


    drawSun(1000, 850, 50);

    drawCloud(cloud1X, 850);
    drawCloud(cloud2X, 900);



    glBegin(GL_QUADS); // atc building glass
    glColor3f(0.4f, 0.6f, 0.8f);
    glVertex2i(210,700);
    glVertex2i(290,700);
    glVertex2i(320,750);
    glVertex2i(180,750);
    glEnd();


    glBegin(GL_QUADS); // atc building
    glColor3f(0.7f, 0.7f, 0.7f);
    glVertex2i(180,750);
    glVertex2i(320,750);
    glVertex2i(320,770);
    glVertex2i(180,770);
    glEnd();


    glBegin(GL_QUADS);  // Building
    glColor3f(0.4f, 0.6f, 0.8f);
    glVertex2i(0,490);
    glVertex2i(500,490);
    glVertex2i(500,640);
    glVertex2i(0,640);
    glEnd();


    glBegin(GL_QUADS);  // Building front
    glColor3f(0.85f, 0.68f, 0.40f);
    glVertex2i(0,466);
    glVertex2i(515,466);
    glVertex2i(500,500);
    glVertex2i(0,500);
    glEnd();



    glBegin(GL_QUADS); //building door
    glColor3f(0.6f, 0.8f, 0.9f);
    glVertex2i(220,500);
    glVertex2i(280,500);
    glVertex2i(280,520);
    glVertex2i(220,520);
    glEnd();


    glLineWidth(2);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5);

    glVertex2f(249,500);
    glVertex2f(249,520);

    glVertex2f(279,500);
    glVertex2f(279,520);

    glVertex2f(219,500);
    glVertex2f(219,520);

    glVertex2f(0,500);
    glVertex2f(500,500);

    glVertex2f(219,520);
    glVertex2f(279,520);

    glVertex2f(500,500);
    glVertex2f(500,640);

    glVertex2f(0,535);
    glVertex2f(500,535);

    glVertex2f(0,570);
    glVertex2f(500,570);

    glVertex2f(0,605);
    glVertex2f(500,605);

    glVertex2f(0,640);
    glVertex2f(500,640);

    glVertex2i(210,700);
    glVertex2i(290,700);


    glVertex2i(290,700);
    glVertex2i(320,750);


    glVertex2i(320,750);
    glVertex2i(180,750);


    glVertex2i(180,750);
    glVertex2i(210,700);

    glVertex2i(180,750);
    glVertex2i(320,750);

    glVertex2i(180,750);
    glVertex2i(180,770);

    glVertex2i(320,750);
    glVertex2i(320,770);

    glVertex2i(320,770);
    glVertex2i(180,770);

    glEnd();




    glBegin(GL_QUADS); //building right side
    glColor3f(0.4f, 0.6f, 0.8f);

    glVertex2i(800,500);
    glVertex2i(1200,500);
    glVertex2i(1200,700);
    glVertex2i(800,700);
    glEnd();


    glBegin(GL_QUADS); //right building door
    glColor3f(0.6f, 0.8f, 0.9f);
    glVertex2i(820,500);
    glVertex2i(880,500);
    glVertex2i(880,530);
    glVertex2i(820,530);
    glEnd();



    glLineWidth(2);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5);


    glVertex2i(800,500);
    glVertex2f(1200, 500);

    glVertex2f(800, 540);
    glVertex2f(1200, 540);

    glVertex2f(800, 580);
    glVertex2f(1200, 580);

    glVertex2f(800, 620);
    glVertex2f(1200, 620);

    glVertex2f(800, 660);
    glVertex2f(1200, 660);

    glVertex2f(800, 700);
    glVertex2f(1200,700);




    glVertex2i(800,500);
    glVertex2f(800,700);

    glVertex2i(900,500);
    glVertex2f(900,700);

    glVertex2i(1000,500);
    glVertex2f(1000,700);

    glVertex2i(1100,500);
    glVertex2f(1100,700);

    glVertex2i(1200,500);
    glVertex2f(1200,700);



    //door

    glVertex2i(820,500);
    glVertex2i(820,530);

    glVertex2i(850,500);
    glVertex2i(850,530);

    glVertex2i(880,500);
    glVertex2i(880,530);

    glVertex2i(880,530);
    glVertex2i(820,530);

    glEnd();


    glBegin(GL_QUADS);  //Right Building front
    glColor3f(0.85f, 0.68f, 0.40f);
    glVertex2f(800, 500);
    glVertex2i(1200,500);
    glVertex2i(1200,466);
    glVertex2i(785,466);
    glEnd();



    drawTree(520, 475);
    drawTree(310, 472);
    drawTree(760, 500);

    drawLampPost(200, 475);
    drawLampPost(600, 500);
    drawLampPost(910, 480);
    drawLampPost(910, 200);

    plane();
    drawRain();




    glFlush();


}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 'n':
                   // Night mode
            isNightMode = true;
            glutPostRedisplay();
            break;

        case 'd':                // Day mode
            isNightMode = false;
            glutPostRedisplay();
            break;


        case 'l':
        case 'L': // Press 'L' to start landing
             if (!isLanding && !isTakeOff) {
                isLanding = true;
                planex = 1200;  // Reset position for re-landing
                planey = 600;}
            break;



        case 't':
        case 'T': // Press 'T' to take off
            if (!isTakeOff && !isLanding) {
                isTakeOff = true;
                isLanding = false;
                planex = -800;
                planey = 200;

            }
            break;

        case 'r':
        case 'R': // Toggle rain
        isRaining = !isRaining;
            break;


       switch (key) {
    case 27: // Correct way to check ESC key
        exit(0);
        break;
}

    }
}

void mouseClick(int button, int state, int x, int y)
{
    if (state == GLUT_DOWN)
    {
        if (button == GLUT_LEFT_BUTTON)
        {
            isRaining = !isRaining; }

    }

}


void init() {
    glClearColor(1.0f, 1.0f, 1.0f, 0.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 1200, 0, 1000);
    glMatrixMode(GL_MODELVIEW);


    cout<<"Press D for Day view"<<endl;
    cout<<"Press N for Night view"<<endl;
    cout<<"Press R for Rainy view"<<endl;
    cout<<"Press L for Landing view"<<endl;
    //cout<<"Press T for Take Off view"<<endl;


}


int main(int argc, char** argv) {
	//Initialize GLUT
	glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(1200, 1000);
	glutCreateWindow("Take off and Landing");
	init();
	initRain();
	glutDisplayFunc(drawScene);
	glutKeyboardFunc(keyboard);
	glutMouseFunc(mouseClick);
	glutTimerFunc(0, update, 0);
	glutTimerFunc(30, updateRain, 0);
	glutMainLoop();

	return 0;
}
